function test_computeODCModel
rng(1234);
addpath('odcpsfMCMC');

%% setup parameters
nVoxels1 = 32;
nVoxels2 = 16;
vSize = 0.5;
upSampleFactor = 4;

rho = 0.5;
delta = 0.3;
epsilon = 0.4;
theta = pi/2;
omega = 0.75;
fwhm = 0.7;
beta = 0.05;

sigmaData = 0.01;

% setup simulation
sim = setupsim(nVoxels1,nVoxels2,vSize,upSampleFactor);

noise     =  generateNoise(sim,1);

%% test if computeODCModel runs for simulation only
[odc,mri] = ...
    computeODCModel(sim,noise,rho,delta,epsilon,theta,omega,beta,fwhm);
disp('computeODCModel runs for simulation only');

% use simulation to generate simulated data
data = mri + randn(size(mri))*sigmaData;
roi = rand(size(mri))>0.3;


%% test if computeODCModel runs for simulation and E
[odc,mri,E] = computeODCModel(sim,...
    noise,rho,delta,epsilon,theta,omega,beta,fwhm,...
    data,sigmaData,roi);
disp('computeODCModel runs for simulation and E');

%% test id computeODCMOdel runs for simulation, E and gradE
[odc,mri,E,...
    dE_dNoiseij,dE_dRho,dE_dDelta,dE_dEpsilon,...
    dE_dTheta,dE_dOmega,dE_dFwhm] = computeODCModel(sim,...
    noise,rho,delta,epsilon,theta,omega,beta,fwhm,...
    data,sigmaData,roi);
disp('computeODCModel runs for simulation and E and gradE');

[dE_dNoiseij_num,dE_dRho_num,dE_dDelta_num,dE_dEpsilon_num,...
    dE_dTheta_num,dE_dOmega_num,dE_dFwhm_num] = ...
    computeGradientNumerically(sim,...
    noise,rho,delta,epsilon,theta,omega,beta,fwhm,...
    data,sigmaData,roi);

disp('comparison to numeric gradient');
disp([dE_dNoiseij(1) dE_dNoiseij_num(1)]); 
disp([dE_dRho        dE_dRho_num]); 
disp([dE_dDelta      dE_dDelta_num]); 
disp([dE_dEpsilon    dE_dEpsilon_num]); 
disp([dE_dTheta      dE_dTheta_num]); 
disp([dE_dOmega      dE_dOmega_num]); 
disp([dE_dFwhm       dE_dFwhm_num]); 
end

function [dE_dNoiseij,dE_dRho,dE_dDelta,dE_dEpsilon,dE_dTheta,...
    dE_dOmega,dE_dFwhm] = computeGradientNumerically(sim,...
    noise,rho,delta,epsilon,theta,omega,beta,fwhm,...
    data,sigmaData,roi)
    
    dE_dRho = numericDerivative(@(rho) ...
        computeE(sim,...
        noise,rho,delta,epsilon,theta,omega,beta,fwhm,...
        data,sigmaData,roi),rho);
    dE_dDelta = numericDerivative(@(delta) ...
        computeE(sim,...
        noise,rho,delta,epsilon,theta,omega,beta,fwhm,...
        data,sigmaData,roi),delta);
    dE_dEpsilon = numericDerivative(@(epsilon) ...
        computeE(sim,...
        noise,rho,delta,epsilon,theta,omega,beta,fwhm,...
        data,sigmaData,roi),epsilon);
    dE_dTheta = numericDerivative(@(theta) ...
        computeE(sim,...
        noise,rho,delta,epsilon,theta,omega,beta,fwhm,...
        data,sigmaData,roi),theta);
    dE_dOmega = numericDerivative(@(omega) ...
        computeE(sim,...
        noise,rho,delta,epsilon,theta,omega,beta,fwhm,...
        data,sigmaData,roi),omega);
    dE_dFwhm = numericDerivative(@(fwhm) ...
        computeE(sim,...
        noise,rho,delta,epsilon,theta,omega,beta,fwhm,...
        data,sigmaData,roi),fwhm);    

    dE_dNoiseij = zeros(size(noise));
    nNoise = sim.N1 * sim.N2;
    for z=1:numel(noise)
        dX = reshape(full(sparse(1,z,1,1,nNoise)),[sim.N1 sim.N2]);
        dE_dNoiseij(z) = numericDerivative(@(noiseij) ...
        computeE(sim,...
            noise+dX*(noiseij-noise(z)),...
            rho,delta,epsilon,theta,omega,beta,fwhm,...
            data,sigmaData,roi),noise(z)); 
    end
end

function E = computeE(sim,...
    noise,rho,delta,epsilon,theta,omega,beta,fwhm,...
    data,sigmaData,roi)
[~,~,E] = computeODCModel(sim,...
    noise,rho,delta,epsilon,theta,omega,beta,fwhm,...
    data,sigmaData,roi);
end

function d = numericDerivative(f,x)
dx = 0.000001;
fPlus = f(x+dx/2);
fMinus = f(x-dx/2);
d = (fPlus-fMinus)/dx;
end

function noise = generateNoise(sim,noise_sigma)
noise = randn(sim.N1,sim.N2)*noise_sigma;
end
